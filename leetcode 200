int root(char** arr, int node1, int* id)
{
    while(node1!=id[node1])
    {
        node1=id[node1];
    }
return node1;
}

int isunion (char** arr,int node1, int node2,int* id, int size,int count)
{
    int i= root(arr,node1,id);
    int j= root(arr,node2,id);
    if(i!=j)
    {
        id[i]=j;
       // printf("%d %d",i,id[i]);
        (count)--;
        
    }
   // printf("%d",count);
return count;
}

int unionfind(char** grid,int gridSize,int* gridColSize)
{
    int d[4][2]={{1,0},{0,1}};
    int rows = gridSize; //4
    int cols = *gridColSize; //5
    //printf("%d %d",gridSize,*gridColSize);
    int parent[rows*cols];
    int i,j,count=0;
    int ix=0;
    for(i=0;i<rows;i++)
    {
        for(j=0;j<cols;j++)
        {
            if(*(*(grid+i)+j)=='1')
            {
                
                ix= i*cols + j;
                *(parent+ix)=ix;
                count++;
                //printf("%d",*(parent+ix));
            }
            
        }
    }
    //printf("%d",count);
    //int count1=0;
    for (int i = 0; i < rows; i++)
    {  
        for (int j = 0; j < cols; j++)
        {  
            if (*(*(grid+i)+j) == '1')
            {  
                int id1 = i*cols+j;
                for(int i1=0;i1<2;i1++)
                {
                    // printf("%d,%d\n",i,j);
                    int x = i+d[i1][0];
                    
                    int y = j+d[i1][1];
                    
                    if (x >= 0 && x < rows && y >= 0 && y < cols && grid[x][y] == '1')
                    {  
                        int id2 = x*cols+y;
                        
                       // printf("%d",res);
                        count=isunion(grid,id1,id2,parent,gridSize,count);
                       
                        //printf("%d",grid[x][y]);
                    }
                }
            }
        }
    }
    //printf("%d",count);
return count;
}

int numIslands(char** grid, int gridSize, int* gridColSize){
   
    if(grid==0 || gridSize==0 || gridColSize ==0)
    {
        return 0;
    }
    
    int count,ress;
    //int rows = gridSize;
   // int cols = *gridColSize;
    //int parent[rows*cols];
   
  ress= unionfind(grid,gridSize,gridColSize);
   // printf("%d",count);
    
return ress;          
}
