'''
class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        dic = {}
        markedcourse = [False]*numCourses
        currcourse = [0]*numCourses
        
        for i in range(numCourses):
            dic[i] = []
        #print(dic)
        for i in prerequisites:
            dic[i[1]].append(i[0])
        #print(dic) 
        #dfs
        def isCycle(dic,markedcourse,currcourse,vertex):
            markedcourse[vertex] = True
            currcourse[vertex] = 1
            for adj in dic[vertex]:
                if currcourse[adj] == 1:
                    return True
                elif markedcourse[adj] == False:
                    if isCycle(dic,markedcourse,currcourse,adj)==True:
                        return True
            currcourse[vertex] =0
            return False
        
        for i in range(numCourses):
            if markedcourse[i] == False:
                if isCycle(dic,markedcourse,currcourse,i):
                    return False
        return True      
'''

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        countOfVisitedNodes = numCourses #track how many nodes visited
        inDegree = [0]*numCourses #array to store indegree of all nodes
        
        graph = {}
    
        #initializing graph with adjacent list
        
        for i in range(numCourses):
            graph[i] = []
        for i in prerequisites:
            graph[i[1]].append(i[0])
            inDegree[i[0]] +=1 #calculating indegree
            
        #print(graph)
        #print(inDegree)
        #length = len(prerequisites)
        length = len(graph)
        #print(length)
        
        '''
        #another way to calculate indegree
        for i in range(length):
            for j in range(len(graph[i])):
                inDegree[graph[i][j]] = inDegree[graph[i][j]]+1
        print(inDegree)
            '''
        
        queue = []
        output = []
        
        #adding nodes to queue having indegree 0
        for i in range(numCourses):
            if inDegree[i]==0:
                queue.append(i) #adding node to queue
        
        while queue: #checking queue is not empty
                temp = queue.pop()
                output.append(temp)
                countOfVisitedNodes -=1 #decreasing
                for i in graph[temp]:  
                    inDegree[i] -=1
                    if(inDegree[i]==0):
                        queue.append(i)
        #print(output)
        if countOfVisitedNodes ==0:
            return True
        else:
            return False
                
